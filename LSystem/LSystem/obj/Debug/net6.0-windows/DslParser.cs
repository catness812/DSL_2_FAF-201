//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\mariu\Desktop\LSystemProject\LSystem\LSystem\Dsl.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LSystem {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DslParser : Parser {

	public static List<object> Result = new List<object>();

	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NUM=12, AXIOM=13;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_function = 2, RULE_freestyle = 3, 
		RULE_axiom = 4, RULE_applies = 5, RULE_angle = 6, RULE_length = 7, RULE_rules = 8, 
		RULE_task = 9, RULE_path = 10;
	public static readonly string[] ruleNames = {
		"program", "line", "function", "freestyle", "axiom", "applies", "angle", 
		"length", "rules", "task", "path"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ls freestyle'", "'('", "'\"'", "','", "')'", "';'", "'{'", "':'", 
		"'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NUM", "AXIOM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Dsl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DslParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(DslParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0) {
				{
				{
				State = 22; line();
				}
				}
				State = 27;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 28; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FreestyleContext freestyle() {
			return GetRuleContext<FreestyleContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; freestyle();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FreestyleContext : ParserRuleContext {
		public AxiomContext axiom() {
			return GetRuleContext<AxiomContext>(0);
		}
		public AppliesContext applies() {
			return GetRuleContext<AppliesContext>(0);
		}
		public AngleContext angle() {
			return GetRuleContext<AngleContext>(0);
		}
		public LengthContext length() {
			return GetRuleContext<LengthContext>(0);
		}
		public RulesContext rules() {
			return GetRuleContext<RulesContext>(0);
		}
		public FreestyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_freestyle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterFreestyle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitFreestyle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			object function;
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null)
            {
				function = typedVisitor.VisitFreestyle(this);
				Result.Add(function);
				return (TResult) function;
			}
            else
            {
				return visitor.VisitChildren(this);
			}	
		}
	}

	[RuleVersion(0)]
	public FreestyleContext freestyle() {
		FreestyleContext _localctx = new FreestyleContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_freestyle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(T__0);
			State = 35; Match(T__1);
			State = 36; Match(T__2);
			State = 37; axiom();
			State = 38; Match(T__2);
			State = 39; Match(T__3);
			State = 40; applies();
			State = 41; Match(T__3);
			State = 42; angle();
			State = 43; Match(T__3);
			State = 44; length();
			State = 45; Match(T__3);
			State = 46; rules(0);
			State = 47; Match(T__4);
			State = 48; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AxiomContext : ParserRuleContext {
		public ITerminalNode AXIOM() { return GetToken(DslParser.AXIOM, 0); }
		public AxiomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axiom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterAxiom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitAxiom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAxiom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AxiomContext axiom() {
		AxiomContext _localctx = new AxiomContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_axiom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(AXIOM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppliesContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(DslParser.NUM, 0); }
		public AppliesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_applies; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterApplies(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitApplies(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitApplies(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppliesContext applies() {
		AppliesContext _localctx = new AppliesContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_applies);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AngleContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(DslParser.NUM, 0); }
		public AngleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_angle; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterAngle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitAngle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAngle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AngleContext angle() {
		AngleContext _localctx = new AngleContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_angle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(DslParser.NUM, 0); }
		public LengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_length; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthContext length() {
		LengthContext _localctx = new LengthContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_length);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(NUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesContext : ParserRuleContext {
		public TaskContext task() {
			return GetRuleContext<TaskContext>(0);
		}
		public RulesContext[] rules() {
			return GetRuleContexts<RulesContext>();
		}
		public RulesContext rules(int i) {
			return GetRuleContext<RulesContext>(i);
		}
		public RulesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rules; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterRules(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitRules(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRules(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesContext rules() {
		return rules(0);
	}

	private RulesContext rules(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		RulesContext _localctx = new RulesContext(_ctx, _parentState);
		RulesContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_rules, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 59; task();
			}
			_ctx.stop = _input.Lt(-1);
			State = 66;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RulesContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_rules);
					State = 61;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 62; Match(T__3);
					State = 63; rules(2);
					}
					} 
				}
				State = 68;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TaskContext : ParserRuleContext {
		public ITerminalNode AXIOM() { return GetToken(DslParser.AXIOM, 0); }
		public PathContext path() {
			return GetRuleContext<PathContext>(0);
		}
		public TaskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_task; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterTask(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitTask(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTask(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TaskContext task() {
		TaskContext _localctx = new TaskContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_task);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(T__6);
			State = 70; Match(T__2);
			State = 71; Match(AXIOM);
			State = 72; Match(T__2);
			State = 73; Match(T__7);
			State = 74; Match(T__2);
			State = 75; path(0);
			State = 76; Match(T__2);
			State = 77; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PathContext : ParserRuleContext {
		public AxiomContext axiom() {
			return GetRuleContext<AxiomContext>(0);
		}
		public PathContext[] path() {
			return GetRuleContexts<PathContext>();
		}
		public PathContext path(int i) {
			return GetRuleContext<PathContext>(i);
		}
		public PathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_path; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.EnterPath(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDslListener typedListener = listener as IDslListener;
			if (typedListener != null) typedListener.ExitPath(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDslVisitor<TResult> typedVisitor = visitor as IDslVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PathContext path() {
		return path(0);
	}

	private PathContext path(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		PathContext _localctx = new PathContext(_ctx, _parentState);
		PathContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_path, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 80; axiom();
				}
				break;

			case 2:
				{
				State = 81; Match(T__9);
				State = 82; path(0);
				State = 83; Match(T__10);
				}
				break;

			case 3:
				{
				State = 85; Match(T__9);
				State = 86; path(0);
				State = 87; Match(T__10);
				State = 88; path(2);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 105;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 103;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						_localctx = new PathContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_path);
						State = 92;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 93; Match(T__9);
						State = 94; path(0);
						State = 95; Match(T__10);
						State = 96; path(2);
						}
						break;

					case 2:
						{
						_localctx = new PathContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_path);
						State = 98;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 99; Match(T__9);
						State = 100; path(0);
						State = 101; Match(T__10);
						}
						break;
					}
					} 
				}
				State = 107;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return rules_sempred((RulesContext)_localctx, predIndex);

		case 10: return path_sempred((PathContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rules_sempred(RulesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}
	private bool path_sempred(PathContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 1);

		case 2: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xFo\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\a\x2\x1A\n\x2\f\x2\xE\x2\x1D\v\x2"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n"+
		"\x43\n\n\f\n\xE\n\x46\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f]\n\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\fj\n\f\f\f\xE"+
		"\fm\v\f\x3\f\x2\x2\x4\x12\x16\r\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x2\x2i\x2\x1B\x3\x2\x2\x2\x4 \x3\x2\x2\x2"+
		"\x6\"\x3\x2\x2\x2\b$\x3\x2\x2\x2\n\x34\x3\x2\x2\x2\f\x36\x3\x2\x2\x2\xE"+
		"\x38\x3\x2\x2\x2\x10:\x3\x2\x2\x2\x12<\x3\x2\x2\x2\x14G\x3\x2\x2\x2\x16"+
		"\\\x3\x2\x2\x2\x18\x1A\x5\x4\x3\x2\x19\x18\x3\x2\x2\x2\x1A\x1D\x3\x2\x2"+
		"\x2\x1B\x19\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1E\x3\x2\x2\x2\x1D\x1B"+
		"\x3\x2\x2\x2\x1E\x1F\a\x2\x2\x3\x1F\x3\x3\x2\x2\x2 !\x5\x6\x4\x2!\x5\x3"+
		"\x2\x2\x2\"#\x5\b\x5\x2#\a\x3\x2\x2\x2$%\a\x3\x2\x2%&\a\x4\x2\x2&\'\a"+
		"\x5\x2\x2\'(\x5\n\x6\x2()\a\x5\x2\x2)*\a\x6\x2\x2*+\x5\f\a\x2+,\a\x6\x2"+
		"\x2,-\x5\xE\b\x2-.\a\x6\x2\x2./\x5\x10\t\x2/\x30\a\x6\x2\x2\x30\x31\x5"+
		"\x12\n\x2\x31\x32\a\a\x2\x2\x32\x33\a\b\x2\x2\x33\t\x3\x2\x2\x2\x34\x35"+
		"\a\xF\x2\x2\x35\v\x3\x2\x2\x2\x36\x37\a\xE\x2\x2\x37\r\x3\x2\x2\x2\x38"+
		"\x39\a\xE\x2\x2\x39\xF\x3\x2\x2\x2:;\a\xE\x2\x2;\x11\x3\x2\x2\x2<=\b\n"+
		"\x1\x2=>\x5\x14\v\x2>\x44\x3\x2\x2\x2?@\f\x3\x2\x2@\x41\a\x6\x2\x2\x41"+
		"\x43\x5\x12\n\x4\x42?\x3\x2\x2\x2\x43\x46\x3\x2\x2\x2\x44\x42\x3\x2\x2"+
		"\x2\x44\x45\x3\x2\x2\x2\x45\x13\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2GH\a\t"+
		"\x2\x2HI\a\x5\x2\x2IJ\a\xF\x2\x2JK\a\x5\x2\x2KL\a\n\x2\x2LM\a\x5\x2\x2"+
		"MN\x5\x16\f\x2NO\a\x5\x2\x2OP\a\v\x2\x2P\x15\x3\x2\x2\x2QR\b\f\x1\x2R"+
		"]\x5\n\x6\x2ST\a\f\x2\x2TU\x5\x16\f\x2UV\a\r\x2\x2V]\x3\x2\x2\x2WX\a\f"+
		"\x2\x2XY\x5\x16\f\x2YZ\a\r\x2\x2Z[\x5\x16\f\x4[]\x3\x2\x2\x2\\Q\x3\x2"+
		"\x2\x2\\S\x3\x2\x2\x2\\W\x3\x2\x2\x2]k\x3\x2\x2\x2^_\f\x3\x2\x2_`\a\f"+
		"\x2\x2`\x61\x5\x16\f\x2\x61\x62\a\r\x2\x2\x62\x63\x5\x16\f\x4\x63j\x3"+
		"\x2\x2\x2\x64\x65\f\x5\x2\x2\x65\x66\a\f\x2\x2\x66g\x5\x16\f\x2gh\a\r"+
		"\x2\x2hj\x3\x2\x2\x2i^\x3\x2\x2\x2i\x64\x3\x2\x2\x2jm\x3\x2\x2\x2ki\x3"+
		"\x2\x2\x2kl\x3\x2\x2\x2l\x17\x3\x2\x2\x2mk\x3\x2\x2\x2\a\x1B\x44\\ik";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LSystem
