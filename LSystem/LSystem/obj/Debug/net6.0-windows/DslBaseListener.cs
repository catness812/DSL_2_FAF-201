//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\mariu\Desktop\LSystemProject\LSystem\LSystem\Dsl.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LSystem {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IDslListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DslBaseListener : IDslListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] DslParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] DslParser.ProgramContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine([NotNull] DslParser.LineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine([NotNull] DslParser.LineContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] DslParser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] DslParser.FunctionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.freestyle"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFreestyle([NotNull] DslParser.FreestyleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.freestyle"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFreestyle([NotNull] DslParser.FreestyleContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.axiom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAxiom([NotNull] DslParser.AxiomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.axiom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAxiom([NotNull] DslParser.AxiomContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.applies"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterApplies([NotNull] DslParser.AppliesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.applies"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitApplies([NotNull] DslParser.AppliesContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.angle"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAngle([NotNull] DslParser.AngleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.angle"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAngle([NotNull] DslParser.AngleContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.length"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLength([NotNull] DslParser.LengthContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.length"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLength([NotNull] DslParser.LengthContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.rules"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRules([NotNull] DslParser.RulesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.rules"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRules([NotNull] DslParser.RulesContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.task"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTask([NotNull] DslParser.TaskContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.task"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTask([NotNull] DslParser.TaskContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="DslParser.path"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPath([NotNull] DslParser.PathContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DslParser.path"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPath([NotNull] DslParser.PathContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace LSystem
