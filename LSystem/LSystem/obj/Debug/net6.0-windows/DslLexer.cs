//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from S:\MB\Univer\ANUL II\Classes II\DDSL\LSystemParser\LSystem\LSystem\Dsl.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LSystem {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DslLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, NUM=13, AXIOM=14;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "NUM", "AXIOM"
	};


	public DslLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'ls tree('", "');'", "'ls dragon('", "'ls freestyle'", "'('", "'\"'", 
		"','", "'{'", "':'", "'}'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "NUM", "AXIOM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Dsl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x10_\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f"+
		"\x3\f\x3\r\x3\r\x3\xE\x3\xE\a\xEV\n\xE\f\xE\xE\xEY\v\xE\x3\xF\x6\xF\\"+
		"\n\xF\r\xF\xE\xF]\x2\x2\x2\x10\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2"+
		"\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2"+
		"\xF\x1D\x2\x10\x3\x2\x5\x3\x2\x33;\x3\x2\x32;\x6\x2--//\x43\\\x63|`\x2"+
		"\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2"+
		"\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x3\x1F\x3\x2\x2\x2\x5(\x3\x2"+
		"\x2\x2\a+\x3\x2\x2\x2\t\x36\x3\x2\x2\x2\v\x43\x3\x2\x2\x2\r\x45\x3\x2"+
		"\x2\x2\xFG\x3\x2\x2\x2\x11I\x3\x2\x2\x2\x13K\x3\x2\x2\x2\x15M\x3\x2\x2"+
		"\x2\x17O\x3\x2\x2\x2\x19Q\x3\x2\x2\x2\x1BS\x3\x2\x2\x2\x1D[\x3\x2\x2\x2"+
		"\x1F \an\x2\x2 !\au\x2\x2!\"\a\"\x2\x2\"#\av\x2\x2#$\at\x2\x2$%\ag\x2"+
		"\x2%&\ag\x2\x2&\'\a*\x2\x2\'\x4\x3\x2\x2\x2()\a+\x2\x2)*\a=\x2\x2*\x6"+
		"\x3\x2\x2\x2+,\an\x2\x2,-\au\x2\x2-.\a\"\x2\x2./\a\x66\x2\x2/\x30\at\x2"+
		"\x2\x30\x31\a\x63\x2\x2\x31\x32\ai\x2\x2\x32\x33\aq\x2\x2\x33\x34\ap\x2"+
		"\x2\x34\x35\a*\x2\x2\x35\b\x3\x2\x2\x2\x36\x37\an\x2\x2\x37\x38\au\x2"+
		"\x2\x38\x39\a\"\x2\x2\x39:\ah\x2\x2:;\at\x2\x2;<\ag\x2\x2<=\ag\x2\x2="+
		">\au\x2\x2>?\av\x2\x2?@\a{\x2\x2@\x41\an\x2\x2\x41\x42\ag\x2\x2\x42\n"+
		"\x3\x2\x2\x2\x43\x44\a*\x2\x2\x44\f\x3\x2\x2\x2\x45\x46\a$\x2\x2\x46\xE"+
		"\x3\x2\x2\x2GH\a.\x2\x2H\x10\x3\x2\x2\x2IJ\a}\x2\x2J\x12\x3\x2\x2\x2K"+
		"L\a<\x2\x2L\x14\x3\x2\x2\x2MN\a\x7F\x2\x2N\x16\x3\x2\x2\x2OP\a]\x2\x2"+
		"P\x18\x3\x2\x2\x2QR\a_\x2\x2R\x1A\x3\x2\x2\x2SW\t\x2\x2\x2TV\t\x3\x2\x2"+
		"UT\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2X\x1C\x3\x2\x2"+
		"\x2YW\x3\x2\x2\x2Z\\\t\x4\x2\x2[Z\x3\x2\x2\x2\\]\x3\x2\x2\x2][\x3\x2\x2"+
		"\x2]^\x3\x2\x2\x2^\x1E\x3\x2\x2\x2\x5\x2W]\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LSystem
